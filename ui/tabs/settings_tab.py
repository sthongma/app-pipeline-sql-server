"""Settings Tab UI Component"""
import os
import json
import customtkinter as ctk
from tkinter import messagebox, filedialog
import pandas as pd
from constants import DatabaseConstants, FileConstants


class SettingsTab:
    def __init__(self, parent, column_settings, dtype_settings, supported_dtypes, callbacks, ui_progress_callback=None, on_all_ui_built=None):
        """
        Initialize Settings Tab
        
        Args:
            parent: Parent widget
            column_settings: Dictionary of column settings
            dtype_settings: Dictionary of dtype settings
            supported_dtypes: List of supported SQL Server data types
            callbacks: Dictionary of callback functions
            ui_progress_callback: Callback for UI building progress
        """
        self.parent = parent
        self.column_settings = column_settings
        self.dtype_settings = dtype_settings
        self.supported_dtypes = supported_dtypes
        self.callbacks = callbacks
        self.ui_progress_callback = ui_progress_callback
        self.on_all_ui_built = on_all_ui_built
        
        # UI variables
        self.dtype_menus = {}
        self.date_format_menus = {}
        
        # ‡πÅ‡∏Ñ‡∏ä UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        self.ui_cache = {}
        self.current_file_type = None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏ö‡∏ö step-by-step
        self._create_ui_step_by_step()
    
    def _start_async_ui_building(self, ui_progress_callback):
        """Start async UI building"""
        if ui_progress_callback:
            ui_progress_callback("Starting to build UI for file types...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° pre-build UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        self._prebuild_all_ui_cache_async(ui_progress_callback)
    
    def _create_ui_step_by_step(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏ö‡∏ö step-by-step ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ"""
        if self.ui_progress_callback:
            self.ui_progress_callback("Building Control Panel...")
        
        self.parent.after(10, self._create_control_panel)
    
    def _create_control_panel(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Control Panel"""
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        control_frame = ctk.CTkFrame(self.parent)
        control_frame.pack(fill="x", padx=10, pady=8)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞ dropdown ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        button_row = ctk.CTkFrame(control_frame, fg_color="transparent")
        button_row.pack(fill="x", pady=4)
        
        if self.ui_progress_callback:
            self.ui_progress_callback("Building buttons...")
        
        self.parent.after(10, lambda: self._create_buttons(button_row))
    
    def _create_buttons(self, button_row):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°"""
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        add_type_btn = ctk.CTkButton(button_row, text="‚ûï Add file type", command=self._add_file_type)
        add_type_btn.pack(side="left", padx=5)
        del_type_btn = ctk.CTkButton(button_row, text="‚ûñ Remove file type", command=self._delete_file_type)
        del_type_btn.pack(side="left", padx=5)
        save_dtype_btn = ctk.CTkButton(button_row, text="‚úÖ Save data types", command=self._save_all_dtype_settings)
        save_dtype_btn.pack(side="left", padx=5)
        edit_type_btn = ctk.CTkButton(button_row, text="‚úèÔ∏è Rename file type", command=self._edit_file_type)
        edit_type_btn.pack(side="left", padx=5)
        
        if self.ui_progress_callback:
            self.ui_progress_callback("Building dropdown...")
        
        self.parent.after(10, lambda: self._create_dropdown(button_row))
    
    def _create_dropdown(self, button_row):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown"""
        # Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        self.file_type_var = ctk.StringVar(value="Select a file type...")
        self.file_type_selector = ctk.CTkOptionMenu(
            button_row, 
            variable=self.file_type_var,
            values=["Select a file type..."],
            command=self._on_file_type_selected,
            width=300,
        )
        self.file_type_selector.pack(side="right", padx=5)
        
        if self.ui_progress_callback:
            self.ui_progress_callback("Building content frame...")
        
        self.parent.after(10, self._create_content_frame)
    
    def _create_content_frame(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Content Frame"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á content frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.content_frame = ctk.CTkFrame(self.parent)
        self.content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 8))
        
        if self.ui_progress_callback:
            self.ui_progress_callback("Loading file type data...")
        
        self.parent.after(10, self._finish_ui_creation)
    
    def _finish_ui_creation(self):
        """‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á UI"""
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        self.refresh_file_type_tabs()

        if self.ui_progress_callback:
            self.ui_progress_callback("Settings Tab ready")

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á callback ‡∏ß‡πà‡∏≤ UI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ prebuild UI)
        if callable(self.on_all_ui_built):
            try:
                self.parent.after(0, self.on_all_ui_built)
            except Exception:
                self.on_all_ui_built()
    
    def _create_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÉ‡∏ô Settings Tab (‡πÄ‡∏î‡∏¥‡∏° - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fallback)"""
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        control_frame = ctk.CTkFrame(self.parent)
        control_frame.pack(fill="x", padx=10, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞ dropdown ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        button_row = ctk.CTkFrame(control_frame, fg_color="transparent")
        button_row.pack(fill="x", pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        add_type_btn = ctk.CTkButton(button_row, text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå", command=self._add_file_type)
        add_type_btn.pack(side="left", padx=5)
        del_type_btn = ctk.CTkButton(button_row, text="üóëÔ∏è ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå", command=self._delete_file_type)
        del_type_btn.pack(side="left", padx=5)
        save_dtype_btn = ctk.CTkButton(button_row, text="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=self._save_all_dtype_settings)
        save_dtype_btn.pack(side="left", padx=5)
        edit_type_btn = ctk.CTkButton(button_row, text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå", command=self._edit_file_type)
        edit_type_btn.pack(side="left", padx=5)
        
        # Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        self.file_type_var = ctk.StringVar(value="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå...")
        self.file_type_selector = ctk.CTkOptionMenu(
            button_row, 
            variable=self.file_type_var,
            values=["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå..."],
            command=self._on_file_type_selected,
            width=300,
        )
        self.file_type_selector.pack(side="right", padx=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á content frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.content_frame = ctk.CTkFrame(self.parent)
        self.content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
    
    def _prebuild_all_ui_cache_async(self, progress_callback=None):
        """Pre-build UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö async"""
        self.file_types_to_build = list(self.column_settings.keys())
        self.total_types = len(self.file_types_to_build)
        self.current_build_index = 0
        self.ui_progress_callback = progress_callback
        
        if self.total_types > 0:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏£‡∏Å
            self._build_next_file_type_ui()
        else:
            if progress_callback:
                progress_callback("No file types to build UI for")
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ SettingsTab ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if callable(self.on_all_ui_built):
                try:
                    self.parent.after(0, self.on_all_ui_built)
                except Exception:
                    self.on_all_ui_built()
    
    def _build_next_file_type_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        if self.current_build_index < self.total_types:
            file_type = self.file_types_to_build[self.current_build_index]
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
            if self.ui_progress_callback:
                self.ui_progress_callback(
                    f"Building UI for: {file_type} ({self.current_build_index + 1}/{self.total_types})"
                )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
            if file_type not in self.ui_cache:
                self._create_and_cache_ui(file_type)
                # ‡∏ã‡πà‡∏≠‡∏ô UI ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                self.ui_cache[file_type]['scroll_frame'].pack_forget()
            
            self.current_build_index += 1
            
            # ‡πÉ‡∏ä‡πâ after() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ UI
            self.parent.after(10, self._build_next_file_type_ui)
        else:
            # ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if self.ui_progress_callback:
                self.ui_progress_callback(f"Built UI for {self.total_types} file types")
            # ‡πÅ‡∏à‡πâ‡∏á callback ‡∏ß‡πà‡∏≤ UI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
            if callable(self.on_all_ui_built):
                try:
                    self.parent.after(0, self.on_all_ui_built)
                except Exception:
                    self.on_all_ui_built()
    
    def _prebuild_all_ui_cache(self, progress_callback=None):
        """Pre-build UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤ - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fallback)"""
        file_types = list(self.column_settings.keys())
        total_types = len(file_types)
        
        for i, file_type in enumerate(file_types):
            if progress_callback:
                progress_callback(f"Building UI for file type: {file_type} ({i+1}/{total_types})")
                
            if file_type not in self.ui_cache:
                self._create_and_cache_ui(file_type)
                # ‡∏ã‡πà‡∏≠‡∏ô UI ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                self.ui_cache[file_type]['scroll_frame'].pack_forget()
        
        if progress_callback and total_types > 0:
            progress_callback(f"Built UI for {total_types} file types")
    
    def refresh_file_type_tabs(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä tabs ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà prebuild UI ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
        # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå dtype_settings ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        for file_type in self.column_settings.keys():
            self._sync_dtype_settings(file_type)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        self._update_file_type_selector()

        # ‡∏•‡πâ‡∏≤‡∏á UI cache ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
        self._cleanup_unused_cache()

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏µ‡πà‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        self._update_cached_ui()

        # ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£ prebuild UI ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ - ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (Lazy Loading)
    
    def _cleanup_unused_cache(self):
        """‡∏•‡πâ‡∏≤‡∏á UI cache ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß"""
        current_file_types = set(self.column_settings.keys())
        cached_file_types = set(self.ui_cache.keys())
        unused_types = cached_file_types - current_file_types
        
        for file_type in unused_types:
            # ‡∏•‡∏ö UI elements
            if 'scroll_frame' in self.ui_cache[file_type]:
                self.ui_cache[file_type]['scroll_frame'].destroy()
            
            # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä
            del self.ui_cache[file_type]
            
            # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å menus
            self.dtype_menus.pop(file_type, None)
            self.date_format_menus.pop(file_type, None)
    
    def _update_cached_ui(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏µ‡πà‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà"""
        for file_type in self.ui_cache.keys():
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï date format menu
            if file_type in self.date_format_menus:
                val = self.dtype_settings.get(file_type, {}).get('_date_format', 'UK')
                self.date_format_menus[file_type].set(val)
    
    def _add_file_type(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        # Popup ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á xlsx/xls/csv)
        file_path = filedialog.askopenfilename(
            filetypes=[
                ("Excel/CSV files", "*.xlsx;*.xls;*.csv"), 
                ("Excel XLSX files", "*.xlsx"), 
                ("Excel XLS files", "*.xls"), 
                ("CSV files", "*.csv")
            ]
        )
        if not file_path:
            return
        
        try:
            if file_path.lower().endswith('.csv'):
                df = pd.read_csv(file_path, nrows=100, encoding='utf-8')
            elif file_path.lower().endswith('.xls'):
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xls ‡πÉ‡∏ä‡πâ xlrd engine
                df = pd.read_excel(file_path, nrows=100, engine='xlrd')
            else:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xlsx
                df = pd.read_excel(file_path, nrows=100)
            
            columns = list(df.columns)
            
            # infer dtype ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            inferred_dtypes = self._infer_dtypes(df)
            
            # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            file_type = ctk.CTkInputDialog(text="New file type name:").get_input()
            if not file_type:
                return
            
            if file_type in self.column_settings:
                messagebox.showwarning("Duplicate", "This file type already exists")
                return
            
            self.column_settings[file_type] = {col: col for col in columns}
            # ‡πÅ‡∏õ‡∏•‡∏á inferred_dtypes ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ target column ‡πÄ‡∏õ‡πá‡∏ô key (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ source = target)
            self.dtype_settings[file_type] = {col: inferred_dtypes[col] for col in columns}
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            if self.callbacks.get('save_column_settings'):
                self.callbacks['save_column_settings']()
            if self.callbacks.get('save_dtype_settings'):
                self.callbacks['save_dtype_settings']()
            
            self.refresh_file_type_tabs()
            messagebox.showinfo("Success", "Imported columns and data types from the sample file")
            
        except Exception as e:
            messagebox.showerror("Error", f"Unable to read file: {e}")
    
    def _infer_dtypes(self, df):
        """‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame"""
        inferred_dtypes = {}
        for col in df.columns:
            dtype = pd.api.types.infer_dtype(df[col], skipna=True)
            if dtype in ["integer", "mixed-integer"]:
                inferred_dtypes[col] = "INT"
            elif dtype in ["floating", "mixed-integer-float"]:
                inferred_dtypes[col] = "FLOAT"
            elif dtype == "boolean":
                inferred_dtypes[col] = "BIT"
            elif dtype.startswith("datetime"):
                inferred_dtypes[col] = "DATETIME"
            elif dtype == "date":
                inferred_dtypes[col] = "DATE"
            elif dtype == "string":
                maxlen = df[col].astype(str).str.len().max()
                if pd.isna(maxlen) or maxlen < 1 or maxlen < 255:
                    maxlen = 255
                elif maxlen > 1000:
                    maxlen = "MAX"
                inferred_dtypes[col] = f"NVARCHAR({maxlen})" if maxlen != "MAX" else "NVARCHAR(MAX)"
            else:
                inferred_dtypes[col] = "NVARCHAR(255)"
        return inferred_dtypes
    
    def _delete_file_type(self):
        """‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå"""
        if not self.column_settings:
            messagebox.showinfo("No data", "No file types to remove")
            return
        
        file_types = list(self.column_settings.keys())
        file_type = ctk.CTkInputDialog(
            text=f"Enter the file type name to remove (e.g., {file_types[0]}):"
        ).get_input()
        
        if not file_type or file_type not in self.column_settings:
            return
        
        if messagebox.askyesno("Confirm", f"Remove file type {file_type}?"):
            self.column_settings.pop(file_type)
            self.dtype_settings.pop(file_type, None)
            
            if self.callbacks.get('save_column_settings'):
                self.callbacks['save_column_settings']()
            if self.callbacks.get('save_dtype_settings'):
                self.callbacks['save_dtype_settings']()
            
            self.refresh_file_type_tabs()
    
    def _edit_file_type(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå"""
        if not self.column_settings:
            messagebox.showinfo("No data", "No file types to edit")
            return
        
        file_types = list(self.column_settings.keys())
        old_type = ctk.CTkInputDialog(
            text=f"Enter the file type name to edit (e.g., {file_types[0]}):"
        ).get_input()
        
        if not old_type or old_type not in self.column_settings:
            return
        
        new_type = ctk.CTkInputDialog(
            text=f"Enter a new file type name (from: {old_type}):"
        ).get_input()
        
        if not new_type or new_type in self.column_settings:
            messagebox.showwarning("Duplicate", "File type already exists or invalid name")
            return
        
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ key ‡πÉ‡∏ô column_settings ‡πÅ‡∏•‡∏∞ dtype_settings
        self.column_settings[new_type] = self.column_settings.pop(old_type)
        if old_type in self.dtype_settings:
            self.dtype_settings[new_type] = self.dtype_settings.pop(old_type)
        
        if self.callbacks.get('save_column_settings'):
            self.callbacks['save_column_settings']()
        if self.callbacks.get('save_dtype_settings'):
            self.callbacks['save_dtype_settings']()
        
        self.refresh_file_type_tabs()
        messagebox.showinfo("Success", f"Renamed file type {old_type} to {new_type}")
    
    def _save_all_dtype_settings(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏±‡πâ‡∏ô"""
        current_file_type = self.file_type_var.get()
        if current_file_type != "Select a file type..." and current_file_type in self.dtype_menus:
            if current_file_type not in self.dtype_settings:
                self.dtype_settings[current_file_type] = {}
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å date format ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            if hasattr(self, 'date_format_menus') and current_file_type in self.date_format_menus:
                # ‡∏•‡∏ö _date_format ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å
                temp_dict = self.dtype_settings[current_file_type].copy()
                if "_date_format" in temp_dict:
                    del temp_dict["_date_format"]
                self.dtype_settings[current_file_type] = {"_date_format": self.date_format_menus[current_file_type].get()}
                self.dtype_settings[current_file_type].update(temp_dict)
            
            # ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡πÉ‡∏ä‡πâ target column ‡πÄ‡∏õ‡πá‡∏ô key)
            for source_col, menu in self.dtype_menus[current_file_type].items():
                target_col = self.column_settings[current_file_type][source_col]
                self.dtype_settings[current_file_type][target_col] = menu.get()
            
            if self.callbacks.get('save_dtype_settings'):
                self.callbacks['save_dtype_settings']()
            messagebox.showinfo("Success", f"Saved data types for {current_file_type}")
        else:
            messagebox.showwarning("Warning", "Please select a file type before saving")
    
    def _on_file_type_selected(self, choice):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å dropdown"""
        if choice == "Select a file type...":
            return
        self._show_file_type_content(choice)
    
    def _show_file_type_content(self, file_type):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡∏ä UI)"""
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        if self.current_file_type == file_type:
            return
            
        # ‡∏ã‡πà‡∏≠‡∏ô UI ‡πÄ‡∏Å‡πà‡∏≤
        self._hide_all_cached_ui()
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ UI ‡πÅ‡∏Ñ‡∏ä‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á UI ‡∏ô‡∏±‡πâ‡∏ô
        if file_type in self.ui_cache:
            self.ui_cache[file_type]['scroll_frame'].pack(fill="both", expand=True, padx=10, pady=(0, 10))
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö lazy loading ‡∏û‡∏£‡πâ‡∏≠‡∏° loading dialog
            self._create_ui_lazy(file_type)
            
        self.current_file_type = file_type
    
    def _hide_all_cached_ui(self):
        """‡∏ã‡πà‡∏≠‡∏ô UI ‡∏ó‡∏µ‡πà‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for cached_ui in self.ui_cache.values():
            cached_ui['scroll_frame'].pack_forget()
    
    def _create_ui_lazy(self, file_type):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏ö‡∏ö lazy loading ‡∏û‡∏£‡πâ‡∏≠‡∏° progress indicator"""
        # ‡πÅ‡∏™‡∏î‡∏á loading message
        loading_frame = ctk.CTkFrame(self.content_frame)
        loading_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        loading_label = ctk.CTkLabel(loading_frame, text=f"Building UI for {file_type}...")
        loading_label.pack(expand=True)
        
        # ‡πÉ‡∏ä‡πâ after ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ
        self.parent.after(10, lambda: self._create_ui_async(file_type, loading_frame))
    
    def _create_ui_async(self, file_type, loading_frame):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö async"""
        try:
            # ‡∏•‡∏ö loading frame
            loading_frame.destroy()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏à‡∏£‡∏¥‡∏á
            self._create_and_cache_ui(file_type)
            
            # ‡πÅ‡∏™‡∏î‡∏á UI ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
            self.ui_cache[file_type]['scroll_frame'].pack(fill="both", expand=True, padx=10, pady=(0, 10))
            
        except Exception as e:
            loading_frame.destroy()
            error_frame = ctk.CTkFrame(self.content_frame)
            error_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
            ctk.CTkLabel(error_frame, text=f"Error: {e}").pack(expand=True)

    def _create_and_cache_ui(self, file_type):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ä UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á scrollable frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        scroll_frame = ctk.CTkScrollableFrame(self.content_frame, width=820, height=460)
        
        # --- Date Format Dropdown ---
        date_format_menu = self._create_date_format_section(scroll_frame, file_type)
        
        # --- Column Settings ---
        column_menus = self._create_column_settings_section(scroll_frame, file_type)
        
        # ‡πÅ‡∏Ñ‡∏ä UI elements
        self.ui_cache[file_type] = {
            'scroll_frame': scroll_frame,
            'date_format_menu': date_format_menu,
            'column_menus': column_menus
        }
    
    def _create_date_format_section(self, parent, file_type):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô Date Format"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° outer frame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
        date_outer_frame = ctk.CTkFrame(parent, fg_color="transparent")
        date_outer_frame.pack(fill="x", pady=10, padx=8)
        
        # date_format_frame ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
        date_format_frame = ctk.CTkFrame(date_outer_frame, corner_radius=8)
        date_format_frame.pack(fill="x", pady=3, padx=3)
        
        date_format_label = ctk.CTkLabel(
            date_format_frame, 
            text="‚è∞ Date Format (US / MM-DD or UK / DD-MM)", 
            width=400, 
            anchor="w",
        )
        date_format_label.pack(side="left", padx=(15, 10), pady=12, expand=True, fill="x")
        
        date_format_menu = ctk.CTkOptionMenu(
            date_format_frame,
            values=[FileConstants.DATE_FORMAT_UK, FileConstants.DATE_FORMAT_US],
            width=220,
        )
        date_format_menu.set(
            self.dtype_settings.get(file_type, {}).get("_date_format", FileConstants.DATE_FORMAT_UK)
        )
        date_format_menu.pack(side="right", padx=(0, 15), pady=12)
        
        # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        self.date_format_menus[file_type] = date_format_menu
        
        return date_format_menu
    
    def _create_column_settings_section(self, parent, file_type):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå"""
        if file_type not in self.dtype_menus:
            self.dtype_menus[file_type] = {}
        
        supported_dtypes = DatabaseConstants.SUPPORTED_DTYPES
        
        column_menus = {}
        
        for source_col, target_col in self.column_settings.get(file_type, {}).items():
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° outer frame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            outer_frame = ctk.CTkFrame(parent, fg_color="transparent")
            outer_frame.pack(fill="x", pady=3, padx=8)
            
            # row_frame ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
            row_frame = ctk.CTkFrame(outer_frame, corner_radius=8)
            row_frame.pack(fill="x", pady=3, padx=3)
            
            col_label = ctk.CTkLabel(row_frame, text=source_col, width=400, anchor="w")
            col_label.pack(side="left", padx=(15, 10), pady=12, expand=True, fill="x")
            
            dtype_menu = ctk.CTkOptionMenu(row_frame, values=supported_dtypes, width=220)
            dtype_menu.set(self.dtype_settings.get(file_type, {}).get(target_col, "NVARCHAR(255)"))
            dtype_menu.pack(side="right", padx=(0, 15), pady=12)
            
            self.dtype_menus[file_type][source_col] = dtype_menu
            column_menus[source_col] = dtype_menu
            
        return column_menus
    
    def _update_file_type_selector(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå"""
        file_types = list(self.column_settings.keys()) if self.column_settings else []
        if file_types:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (alphabetically)
            file_types = sorted(file_types)
            values = ["Select a file type..."] + file_types
            self.file_type_selector.configure(values=values)
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            if len(file_types) == 1:
                self.file_type_var.set(file_types[0])
                self._show_file_type_content(file_types[0])
            else:
                self.file_type_var.set("Select a file type...")
        else:
            self.file_type_selector.configure(values=["Select a file type..."])
            self.file_type_var.set("Select a file type...")
            # ‡∏ã‡πà‡∏≠‡∏ô UI ‡∏ó‡∏µ‡πà‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
            self._hide_all_cached_ui()
            self.current_file_type = None
    
    def _sync_dtype_settings(self, file_type):
        """‡∏ã‡∏¥‡∏á‡∏Ñ‡πå dtype_settings ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö column_settings (‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö key ‡∏ï‡∏≤‡∏° target column) ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö meta key ‡πÄ‡∏ä‡πà‡∏ô _date_format"""
        target_cols = set(self.column_settings.get(file_type, {}).values())
        dtypes = self.dtype_settings.get(file_type, {})
        # ‡πÄ‡∏Å‡πá‡∏ö meta key (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ _)
        meta_keys = {k: v for k, v in dtypes.items() if k.startswith('_')}
        # ‡∏•‡∏ö dtype ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô target columns (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô meta key)
        dtypes = {col: dtypes[col] for col in target_cols if col in dtypes}
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° dtype ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        for col in target_cols:
            if col not in dtypes:
                dtypes[col] = "NVARCHAR(255)"
        # ‡∏£‡∏ß‡∏° meta key ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        dtypes.update(meta_keys)
        self.dtype_settings[file_type] = dtypes
